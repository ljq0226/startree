generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  name      String    @id @unique
  email     String    @unique
  image     String    @unique
  password  String    @default("123")
  nickName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  profileId Int
  profile   Profile   @relation(fields: [profileId], references: [id])
  forwards  Forward[]
  likes     Like[]
  posts     Post[]
  replys    Reply[]
  stars     Star[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  bio     String? @default("")
  github  String? @default("")
  website String? @default("")
  User    User[]
}

model Follow {
  id           Int      @id @default(autoincrement())
  name         String
  followedName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userName  String?
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User?    @relation(fields: [userName], references: [name])
}

model Forward {
  id            Int      @id @default(autoincrement())
  userName      String
  postId        Int
  forwardPostId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  post          Post     @relation(fields: [forwardPostId], references: [id])
  user          User     @relation(fields: [userName], references: [name])
}

model Star {
  id        Int      @id @default(autoincrement())
  userName  String
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userName], references: [name])
}

model Post {
  id          Int       @id @default(autoincrement())
  content     String    @db.LongText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  userName    String
  forwards    Forward[]
  likes       Like[]
  user        User      @relation(fields: [userName], references: [name])
  replys      Reply[]
  stars       Star[]
  tags        Tag[]     @relation("PostToTag")
  Report      Report[]
  reportCount Int       @default(0)
}

model Reply {
  id        Int      @id @default(autoincrement())
  userName  String
  parentId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userName], references: [name])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  posts     Post[]   @relation("PostToTag")
}

model Report {
  id        Int      @id @default(autoincrement())
  reporter  String
  reported  String
  content   String   @db.LongText
  reason    String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  status    String   @default("PENDING")
}

model NoReport {
  id   Int    @id @default(autoincrement())
  user String
}

model SensitiveWord {
  id   Int    @id @default(autoincrement())
  word String
}
