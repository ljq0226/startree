// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  name  String @id @unique
  email String @unique
  //avatar
  image String @unique

  nickName String
  profile  Profile   @relation(fields: [profileId], references: [id])
  //1-n
  posts    Post[]
  replys   Reply[]
  likes    Like[]
  stars    Star[]
  forwards Forward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  profileId Int
}

model Profile {
  id      Int     @id() @default(autoincrement())
  bio     String? @default("")
  github  String? @default("")
  website String? @default("")
  User    User[]
}

model Follow {
  id           Int      @id @default(autoincrement())
  name         String
  followedName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User?    @relation(fields: [userName], references: [name])
  userName  String?
  postId    Int
}

model Forward {
  id            Int      @id @default(autoincrement())
  userName      String   @unique
  postId        Int?
  forwardPostId Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userName], references: [name])
  Post          Post?    @relation(fields: [forwardPostId], references: [id])
}

model Star {
  id        Int      @id @default(autoincrement())
  userName  String   @unique
  postId    Int?
  replyId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userName], references: [name])
  Post      Post?    @relation(fields: [postId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String    @db.LongText
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  replys    Reply[]
  tags      Tag[]
  user      User?     @relation(fields: [userName], references: [name])
  userName  String
  likes     Like[]
  stars     Star[]
  forwards  Forward[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userName  String
  parentId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      User?    @relation(fields: [userName], references: [name])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
