# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateFollowInput {
  followedName: String!
  name: String!
}

input CreateForwardInput {
  postId: Float!
  userName: String!
}

input CreateLikeInput {
  postId: Float!
  userName: String!
}

input CreatePostInput {
  content: String!
  userName: String!
}

input CreateReplyInput {
  content: String!
  parentId: Float!
  userName: String!
}

input CreateReportInput {
  content: String!
  postId: Float!
  reason: String!
  reporter: String!
}

input CreateStarInput {
  postId: Float!
  userName: String!
}

input CreateUserInput {
  email: String!
  image: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteForwardInput {
  postId: Float!
  userName: String!
}

input DeleteLikeInput {
  postId: Float!
  userName: String!
}

input DeleteReplyInput {
  parentId: Float!
  postId: Float!
}

input DeleteStarInput {
  postId: Float!
  userName: String!
}

type Forward {
  createdAt: DateTime!
  forwardPostId: Float!
  id: Float!
  post: Post!
  postId: Float!
  updatedAt: DateTime!
  user: User!
  userName: String!
}

type Like {
  createdAt: DateTime!
  id: Float!
  post: Post!
  postId: Float!
  updatedAt: DateTime!
  user: User!
  userName: String!
}

type Mutation {
  createFollow(createFollowInput: CreateFollowInput!): Boolean!
  createForward(createForwardInput: CreateForwardInput!): Boolean!
  createLike(createLikeInput: CreateLikeInput!): Boolean!
  createPost(createPostInput: CreatePostInput!): PostInfo!
  createReply(createReplyInput: CreateReplyInput!): Boolean!
  createReport(createReportInput: CreateReportInput!): Boolean!
  createStar(createStarInput: CreateStarInput!): Boolean!
  createTag(name: String!): Tag!
  createUser(createUserInput: CreateUserInput!): User!
  deleteForward(deleteForwardInput: DeleteForwardInput!): Boolean!
  deleteLike(deleteLikeInput: DeleteLikeInput!): Boolean!
  deletePost(id: Float!): Boolean!
  deleteReply(deleteReplyInput: DeleteReplyInput!): Boolean!
  deleteStar(deleteStarInput: DeleteStarInput!): Boolean!
  removeFollow(removeFollowInput: CreateFollowInput!): Boolean!
  removeReport(id: Int!): Report!
  updateReport(updateReportInput: UpdateReportInput!): Report!
  updateUserProfile(updateUserInput: UpdateUserInput!): User!
}

type Post {
  content: String!
  createdAt: DateTime!
  forwards: [Forward!]!
  id: Float!
  likes: [Like!]!
  replys: [Reply!]
  tags: [Tag!]
  updatedAt: DateTime!
  user: User!
  userName: String!
}

type PostCount {
  forward: Float!
  isForward: Boolean!
  isLike: Boolean!
  isReply: Boolean!
  isStar: Boolean!
  like: Float!
  reply: Float!
}

type PostInfo {
  content: String!
  createdAt: DateTime!
  id: Float!
  postCount: PostCount!
  profileCount: ProfileCount!
  user: UserInfo!
}

type PostReplyInfo {
  content: String!
  createdAt: DateTime!
  id: Float!
  postCount: PostCount!
  profileCount: ProfileCount!
  replys: [PostReplyInfo!]!
  user: UserInfo!
}

type Profile {
  bio: String!
  github: String!
  id: Int!
  user: User!
  website: String!
}

type ProfileCount {
  followed: Float!
  followings: Float!
  posts: Float!
}

type ProfileData {
  followed: [User!]!
  followings: [User!]!
  posts: [PostInfo!]!
}

input ProfileInput {
  bio: String!
  github: String!
  id: Int!
  website: String!
}

type Query {
  findAll: [User!]!
  findAllPost(name: String!, pageIndex: Float!): [PostInfo!]!
  findByAt(query: String!): [User!]!
  findByHashTag(query: String!): [Tag!]!
  findFollowers(followedName: String!): [User!]!
  findFollowings(name: String!): [User!]!
  findIsFollowing(name: String!, userName: String!): Boolean!
  findPostByTag(id: Float!): Post!
  findPostByUser(name: String!): [Post!]!
  followedCount(name: String!): Float!
  getHomePost(name: String!, pageIndex: Float!): [PostInfo!]!
  getLikePost(userName: String!): [PostInfo!]!
  getPostById(id: Float!, name: String!): [PostInfo!]!
  getPostByTag(name: String!, tagName: String!): [PostInfo!]!
  getPostCount(id: Float!, name: String!): PostCount!
  getPostReply(name: String!, postId: Float!): [PostReplyInfo!]!
  getProfileByName(name: String!): Profile!
  getProfileData(name: String!): ProfileData!
  getStarPost(userName: String!): [PostInfo!]!
  profileCount(name: String!): ProfileCount!
  queryInput(query: String!): QueryInput!
  report(id: Int!): Report!
  userData(name: String!): User!
}

type QueryInput {
  tags: [TagData!]!
  users: [UserData!]!
}

type Reply {
  createdAt: DateTime!
  id: Float!
  parentId: Float!
  post: Post!
  postId: Float!
  updatedAt: DateTime!
  user: User!
  userName: String!
}

type Report {
  content: String!
  createdAt: DateTime!
  id: Float!
  post: Post!
  postId: Float!
  reason: String!
  reported: String!
  reporter: String!
  status: Float!
}

type Star {
  createdAt: DateTime!
  id: Float!
  post: Post!
  postId: Float!
  updatedAt: DateTime!
  user: User!
  userName: String!
}

type Tag {
  createdAt: DateTime!
  id: Float!
  name: String!
  posts: [Post!]!
  updatedAt: DateTime!
}

type TagData {
  id: Float!
  name: String!
}

input UpdateReportInput {
  content: String
  id: Int!
  postId: Float
  reason: String
  reporter: String
}

input UpdateUserInput {
  email: String!
  image: String!
  name: String!
  nickName: String!
  profile: ProfileInput!
}

type User {
  """createdTime"""
  createdAt: DateTime!

  """user email"""
  email: String!

  """user image"""
  image: String!
  likes: [Like!]!

  """user name"""
  name: String!

  """user nickname"""
  nickName: String!
  posts: [Post!]!
  profile: Profile!
  profileId: Float!
  replys: [Reply!]!
  stars: [Star!]!

  """updatedTime"""
  updatedAt: DateTime!
}

type UserData {
  image: String!
  name: String!
  nickName: String!
}

type UserInfo {
  bio: String!
  image: String!
  name: String!
  nickName: String!
}